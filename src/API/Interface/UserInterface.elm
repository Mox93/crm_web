-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module API.Interface.UserInterface exposing (..)

import API.InputObject
import API.Interface
import API.Object
import API.Scalar
import API.ScalarCodecs
import API.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (FragmentSelectionSet(..), SelectionSet(..))
import Json.Decode as Decode


type alias Fragments decodesTo =
    { onUser : SelectionSet decodesTo API.Object.User
    }


{-| Build an exhaustive selection of type-specific fragments.
-}
fragments :
    Fragments decodesTo
    -> SelectionSet decodesTo API.Interface.UserInterface
fragments selections =
    Object.exhuastiveFragmentSelection
        [ Object.buildFragment "User" selections.onUser
        ]


{-| Can be used to create a non-exhuastive set of fragments by using the record
update syntax to add `SelectionSet`s for the types you want to handle.
-}
maybeFragments : Fragments (Maybe decodesTo)
maybeFragments =
    { onUser = Graphql.SelectionSet.empty |> Graphql.SelectionSet.map (\_ -> Nothing)
    }


id : SelectionSet API.ScalarCodecs.Id API.Interface.UserInterface
id =
    Object.selectionForField "ScalarCodecs.Id" "Id" [] (API.ScalarCodecs.codecs |> API.Scalar.unwrapCodecs |> .codecId |> .decoder)


creationDate : SelectionSet API.ScalarCodecs.DateTime API.Interface.UserInterface
creationDate =
    Object.selectionForField "ScalarCodecs.DateTime" "creationDate" [] (API.ScalarCodecs.codecs |> API.Scalar.unwrapCodecs |> .codecDateTime |> .decoder)


modifiedDate : SelectionSet API.ScalarCodecs.DateTime API.Interface.UserInterface
modifiedDate =
    Object.selectionForField "ScalarCodecs.DateTime" "modifiedDate" [] (API.ScalarCodecs.codecs |> API.Scalar.unwrapCodecs |> .codecDateTime |> .decoder)


firstName : SelectionSet String API.Interface.UserInterface
firstName =
    Object.selectionForField "String" "firstName" [] Decode.string


lastName : SelectionSet String API.Interface.UserInterface
lastName =
    Object.selectionForField "String" "lastName" [] Decode.string


email : SelectionSet String API.Interface.UserInterface
email =
    Object.selectionForField "String" "email" [] Decode.string


phoneNumber : SelectionSet String API.Interface.UserInterface
phoneNumber =
    Object.selectionForField "String" "phoneNumber" [] Decode.string


company : SelectionSet (Maybe API.ScalarCodecs.Id) API.Interface.UserInterface
company =
    Object.selectionForField "(Maybe ScalarCodecs.Id)" "company" [] (API.ScalarCodecs.codecs |> API.Scalar.unwrapCodecs |> .codecId |> .decoder |> Decode.nullable)


role : SelectionSet decodesTo API.Object.Role -> SelectionSet (Maybe (List (Maybe decodesTo))) API.Interface.UserInterface
role object_ =
    Object.selectionForCompositeField "role" [] object_ (identity >> Decode.nullable >> Decode.list >> Decode.nullable)


avatar : SelectionSet (Maybe String) API.Interface.UserInterface
avatar =
    Object.selectionForField "(Maybe String)" "avatar" [] (Decode.string |> Decode.nullable)


config : SelectionSet decodesTo API.Object.Config -> SelectionSet (Maybe decodesTo) API.Interface.UserInterface
config object_ =
    Object.selectionForCompositeField "config" [] object_ (identity >> Decode.nullable)
