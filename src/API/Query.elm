-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module API.Query exposing (..)

import API.InputObject
import API.Interface
import API.Object
import API.Scalar
import API.ScalarCodecs
import API.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode exposing (Decoder)


type alias LoginOptionalArguments =
    { rememberMe : OptionalArgument Bool }


type alias LoginRequiredArguments =
    { email : String
    , password : String
    }


login : (LoginOptionalArguments -> LoginOptionalArguments) -> LoginRequiredArguments -> SelectionSet decodesTo API.Object.Login -> SelectionSet decodesTo RootQuery
login fillInOptionals requiredArgs object_ =
    let
        filledInOptionals =
            fillInOptionals { rememberMe = Absent }

        optionalArgs =
            [ Argument.optional "rememberMe" filledInOptionals.rememberMe Encode.bool ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "login" (optionalArgs ++ [ Argument.required "email" requiredArgs.email Encode.string, Argument.required "password" requiredArgs.password Encode.string ]) object_ identity


logout : SelectionSet Bool RootQuery
logout =
    Object.selectionForField "Bool" "logout" [] Decode.bool


refresh : SelectionSet String RootQuery
refresh =
    Object.selectionForField "String" "refresh" [] Decode.string


avatar : SelectionSet (Maybe String) RootQuery
avatar =
    Object.selectionForField "(Maybe String)" "avatar" [] (Decode.string |> Decode.nullable)


type alias CompanyRequiredArguments =
    { id : API.ScalarCodecs.Id }


company : CompanyRequiredArguments -> SelectionSet decodesTo API.Object.Company -> SelectionSet (Maybe decodesTo) RootQuery
company requiredArgs object_ =
    Object.selectionForCompositeField "company" [ Argument.required "Id" requiredArgs.id (API.ScalarCodecs.codecs |> API.Scalar.unwrapEncoder .codecId) ] object_ (identity >> Decode.nullable)


companyList : SelectionSet decodesTo API.Object.Company -> SelectionSet (Maybe (List (Maybe decodesTo))) RootQuery
companyList object_ =
    Object.selectionForCompositeField "companyList" [] object_ (identity >> Decode.nullable >> Decode.list >> Decode.nullable)


type alias CompanyMembersRequiredArguments =
    { companyId : API.ScalarCodecs.Id }


companyMembers : CompanyMembersRequiredArguments -> SelectionSet decodesTo API.Object.User -> SelectionSet (Maybe (List (Maybe decodesTo))) RootQuery
companyMembers requiredArgs object_ =
    Object.selectionForCompositeField "companyMembers" [ Argument.required "companyId" requiredArgs.companyId (API.ScalarCodecs.codecs |> API.Scalar.unwrapEncoder .codecId) ] object_ (identity >> Decode.nullable >> Decode.list >> Decode.nullable)


productCategoryList : SelectionSet decodesTo API.Object.ProductCategory -> SelectionSet (Maybe (List (Maybe decodesTo))) RootQuery
productCategoryList object_ =
    Object.selectionForCompositeField "productCategoryList" [] object_ (identity >> Decode.nullable >> Decode.list >> Decode.nullable)


type alias ProductCategoryRequiredArguments =
    { id : API.ScalarCodecs.Id }


productCategory : ProductCategoryRequiredArguments -> SelectionSet decodesTo API.Object.ProductCategory -> SelectionSet (Maybe decodesTo) RootQuery
productCategory requiredArgs object_ =
    Object.selectionForCompositeField "productCategory" [ Argument.required "Id" requiredArgs.id (API.ScalarCodecs.codecs |> API.Scalar.unwrapEncoder .codecId) ] object_ (identity >> Decode.nullable)


type alias ProductRequiredArguments =
    { id : API.ScalarCodecs.Id }


product : ProductRequiredArguments -> SelectionSet decodesTo API.Object.Product -> SelectionSet (Maybe decodesTo) RootQuery
product requiredArgs object_ =
    Object.selectionForCompositeField "product" [ Argument.required "Id" requiredArgs.id (API.ScalarCodecs.codecs |> API.Scalar.unwrapEncoder .codecId) ] object_ (identity >> Decode.nullable)


type alias ProductListRequiredArguments =
    { companyId : API.ScalarCodecs.Id }


productList : ProductListRequiredArguments -> SelectionSet decodesTo API.Object.Product -> SelectionSet (Maybe (List (Maybe decodesTo))) RootQuery
productList requiredArgs object_ =
    Object.selectionForCompositeField "productList" [ Argument.required "companyId" requiredArgs.companyId (API.ScalarCodecs.codecs |> API.Scalar.unwrapEncoder .codecId) ] object_ (identity >> Decode.nullable >> Decode.list >> Decode.nullable)


type alias CustomerRequiredArguments =
    { id : API.ScalarCodecs.Id }


customer : CustomerRequiredArguments -> SelectionSet decodesTo API.Object.Customer -> SelectionSet (Maybe decodesTo) RootQuery
customer requiredArgs object_ =
    Object.selectionForCompositeField "customer" [ Argument.required "Id" requiredArgs.id (API.ScalarCodecs.codecs |> API.Scalar.unwrapEncoder .codecId) ] object_ (identity >> Decode.nullable)


type alias CustomerListRequiredArguments =
    { companyId : API.ScalarCodecs.Id }


customerList : CustomerListRequiredArguments -> SelectionSet decodesTo API.Object.Customer -> SelectionSet (Maybe (List (Maybe decodesTo))) RootQuery
customerList requiredArgs object_ =
    Object.selectionForCompositeField "customerList" [ Argument.required "companyId" requiredArgs.companyId (API.ScalarCodecs.codecs |> API.Scalar.unwrapEncoder .codecId) ] object_ (identity >> Decode.nullable >> Decode.list >> Decode.nullable)


type alias CampaignRequiredArguments =
    { id : API.ScalarCodecs.Id }


campaign : CampaignRequiredArguments -> SelectionSet decodesTo API.Object.Campaign -> SelectionSet (Maybe decodesTo) RootQuery
campaign requiredArgs object_ =
    Object.selectionForCompositeField "campaign" [ Argument.required "Id" requiredArgs.id (API.ScalarCodecs.codecs |> API.Scalar.unwrapEncoder .codecId) ] object_ (identity >> Decode.nullable)


type alias CampaignListRequiredArguments =
    { companyId : API.ScalarCodecs.Id }


campaignList : CampaignListRequiredArguments -> SelectionSet decodesTo API.Object.Campaign -> SelectionSet (Maybe (List (Maybe decodesTo))) RootQuery
campaignList requiredArgs object_ =
    Object.selectionForCompositeField "campaignList" [ Argument.required "companyId" requiredArgs.companyId (API.ScalarCodecs.codecs |> API.Scalar.unwrapEncoder .codecId) ] object_ (identity >> Decode.nullable >> Decode.list >> Decode.nullable)
